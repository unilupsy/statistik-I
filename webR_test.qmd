---
title: "webR Document"
format:
  html:
    embed-resources: true
engine: knitr
webr:
  packages: ['ggplot2', 'dplyr']
filters:
  - webr
---

Sample interactive cell

```{webr-r}
plot(pressure)
```


# Test

Auf dieser Seite k√∂nnen wir WebR testen.

Wird noch implementiert.

<!-- ### Interactive R code editor -->

<!-- ```{=html} -->
<!-- <button class="btn btn-success btn-sm" disabled type="button" id="runButton">Loading webR...</button> -->
<!-- <div id="editor">fit <- lm(mpg ~ am, data=mtcars) -->
<!-- summary(fit)</div> -->
<!-- <pre><code id="out"></code></pre> -->
<!-- <canvas -->
<!--   id="canvas" -->
<!--   width="1008" -->
<!--   height="1008" -->
<!--   style="display: none; margin: auto; width: 700px;" -->
<!-- ></canvas> -->
<!-- <script type="module"> -->
<!--   var editor = ace.edit("editor"); -->
<!--   editor.setOptions({ fontSize: "11pt", maxLines: Infinity }); -->
<!--   editor.session.setMode("ace/mode/r"); -->

<!--   import { WebR } from 'https://webr.r-wasm.org/{{< env WEBR_VERSION_TAG >}}/webr.mjs'; -->
<!--   const webR = new WebR(); -->
<!--   await webR.init(); -->
<!--   await webR.evalRVoid('options(device=webr::canvas)'); -->
<!--   const shelter = await new webR.Shelter(); -->

<!--   // Handle webR output messages in an async loop -->
<!--   (async ()=>{ -->
<!--     for (;;) { -->
<!--       const output = await webR.read(); -->
<!--       switch (output.type) { -->
<!--         case 'canvas': -->
<!--           let canvas = document.getElementById('canvas'); -->
<!--           if (output.data.event === 'canvasNewPage') { -->
<!--             canvas.style.display = 'block'; -->
<!--             canvas.getContext('2d').clearRect(0, 0, 1008, 1008); -->
<!--           } -->
<!--           if (output.data.event === 'canvasImage') { -->
<!--             canvas.getContext('2d').drawImage(output.data.image, 0, 0); -->
<!--           } -->
<!--           break; -->
<!--         default: -->
<!--           break; -->
<!--       } -->
<!--     } -->
<!--   })(); -->

<!--   async function runR() { -->
<!--     document.getElementById('canvas').style.display = 'none'; -->
<!--     let code = editor.getValue(); -->
<!--     const result = await shelter.captureR(code, { -->
<!--       withAutoprint: true, -->
<!--       captureStreams: true, -->
<!--       captureConditions: false -->
<!--     }); -->
<!--     try { -->
<!--       const out = result.output.filter( -->
<!--         evt => evt.type == 'stdout' || evt.type == 'stderr' -->
<!--       ).map((evt) => evt.data); -->
<!--       document.getElementById('out').innerText = out.join('\n'); -->
<!--     } finally { -->
<!--       shelter.purge(); -->
<!--     } -->
<!--   } -->
<!--   document.getElementById('runButton').onclick = runR; -->
<!--   document.getElementById('runButton').innerText = 'Run code'; -->
<!--   document.getElementById('runButton').disabled = false; -->

<!-- </script> -->
<!-- ``` -->